{"version":3,"file":"register.component.js","sourceRoot":"","sources":["../../../../src/components/register/register.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,YAAY,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AACnF,OAAO,EAAa,WAAW,EAAe,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAIjF,OAAO,EAAE,qBAAqB,EAAE,MAAM,uCAAuC,CAAC;;IA6D1E,+BACY,qBAA4C,EAC7C,WAAwB;QADvB,0BAAqB,GAArB,qBAAqB,CAAuB;QAC7C,gBAAW,GAAX,WAAW,CAAa;sBAhBP,IAAI,YAAY,EAAE;0BAGV,IAAI,YAAY,EAAE;2BAElB;YAChC,QAAQ,EAAC,EAAE;YACX,KAAK,EAAE,EAAE;YACT,QAAQ,EAAE,EAAE;YACZ,UAAU,EAAE,EAAE;SACjB;KAQA;IAED,wCAAQ,GAAR;QACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACvC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9D,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAChE,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9D,CAAC,CAAC;KACN;IAED,wCAAQ,GAAR;QAAA,iBAWC;QATG,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,KAAK,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;YAC9D,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;YACvC,MAAM,CAAC,KAAK,CAAC;SACd;QACD,IAAI,CAAC,qBAAqB;aACrB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;aAC1B,SAAS,CAAC,UAAC,MAAW;YACnB,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAC5B,CAAC,CAAC;KACV;IAED,4CAAY,GAAZ;QACI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC9B;;gBAzFJ,SAAS,SAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,QAAQ,EAAE,y3DAoCP;oBACH,MAAM,EAAE,CAAC,EAAE,CAAC;oBACZ,aAAa,EAAE,iBAAiB,CAAC,QAAQ;iBAC1C;;;;gBA3CQ,qBAAqB;gBAJV,WAAW;;;2BAkD1B,MAAM;+BAGN,MAAM;;gCAtDX;;SAiDa,qBAAqB","sourcesContent":["import { Component, Output, EventEmitter, ViewEncapsulation } from '@angular/core'; \nimport { FormGroup, FormBuilder, FormControl, Validators } from \"@angular/forms\";\nimport { CredentialsInterface } from './../../interfaces/credentials.interface';\n\n// import { AuthenticationService } from 'authmodule-angular6-module-example';\nimport { AuthenticationService } from '../../services/authentication.service';\n\n@Component({\n  selector: \"auth-app-register\",\n  template: `\n<ion-grid>\n   <ion-row>\n     <ion-col  col-12 col-xl-8 offset-xl-2 col-lg-10 offset-lg-1>\n        <ion-list>\n            <form [formGroup]=\"registerform\" (ngSubmit)=\"onSubmit()\">\n                <ion-item>\n                    <ion-label stacked primary>Username</ion-label>\n                    <ion-input [(ngModel)]=\"credentials.username\" formControlName=\"username\"\n                            type=\"text\" id=\"username\" spellcheck=\"false\" autocapitalize=\"off\" ngDefaultControl>\n                    </ion-input>\n                </ion-item>\n                <ion-item>\n                    <ion-label stacked primary>Email</ion-label>\n                    <ion-input [(ngModel)]=\"credentials.email\" formControlName=\"email\"\n                            type=\"text\" id=\"email\" spellcheck=\"false\" autocapitalize=\"off\" ngDefaultControl>\n                    </ion-input>\n                </ion-item>\n                <ion-item>\n                    <ion-label stacked primary>Password</ion-label>\n                    <ion-input [(ngModel)]=\"credentials.password\" formControlName=\"password\" type=\"text\" id=\"password\">\n                    </ion-input>\n                </ion-item>\n                <ion-item>\n                    <ion-label stacked primary>Repeat Password</ion-label>\n                    <ion-input [(ngModel)]=\"credentials.repassword\" formControlName=\"repassword\" type=\"text\" id=\"repassword\">\n                    </ion-input>\n                </ion-item>\n                <button ion-button type=\"submit\" block full primary [disabled]=\"!registerform.valid\">Register</button>\n                <button ion-button type=\"submit\" block secondary (click)=\"loginAccount()\">Login to account</button>\n                <social-login></social-login>\n            </form>\n        </ion-list>\n     </ion-col>\n   </ion-row>\n </ion-grid>\n    `,\n  styles: [``],\n  encapsulation: ViewEncapsulation.Emulated\n})\nexport class AuthRegisterComponent {\n\n    @Output()\n    submit: EventEmitter<any> = new EventEmitter();\n\n    @Output()\n    changePage: EventEmitter<boolean> = new EventEmitter();\n\n    credentials: CredentialsInterface = {\n        username:'',\n        email: '',\n        password: '', \n        repassword: '' \n    };\n\n    registerform: FormGroup;\n    \n    constructor(\n        private authenticationService: AuthenticationService,\n        public formBuilder: FormBuilder) {\n\n    }\n\n    ngOnInit(): any {\n        this.registerform = this.formBuilder.group({\n            username: ['', [Validators.required, Validators.minLength(3)]],\n            password: ['', [Validators.required, Validators.minLength(3)]],\n            repassword: ['', [Validators.required, Validators.minLength(3)]],\n            email: ['', [Validators.required, Validators.minLength(3)]]\n        });\n    }\n\n    onSubmit() {\n\n        if (this.credentials.password !== this.credentials.repassword) {\n          console.log('passwords must be equal');\n          return false;\n        }\n        this.authenticationService\n            .register(this.credentials)\n            .subscribe((result: any) => {\n                this.submit.emit(result);\n            });\n    }\n\n    loginAccount() {\n        this.changePage.emit(true);\n    }\n\n}\n"]}